AWSTemplateFormatVersion: '2010-09-09'
Description: 'Account A resources for automatic NS record creation'

Parameters:
  OrganizationId:
    Type: String
    Default: 'o-123456abc'
    Description: 'Organization ID for resource-based policy'
  HostedZoneId:
    Type: String
    Default: 'Z024123245667868YR1'
    Description: 'Route 53 Hosted Zone ID for the parent domain'

Resources:
  # DynamoDB Table
  NSRecordTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: 'route53-ns-records-v2'
      AttributeDefinitions:
        - AttributeName: 'subdomain'
          AttributeType: 'S'
        - AttributeName: 'timestamp'
          AttributeType: 'S'
      KeySchema:
        - AttributeName: 'subdomain'
          KeyType: 'HASH'
        - AttributeName: 'timestamp'
          KeyType: 'RANGE'
      StreamSpecification:
        StreamViewType: 'NEW_AND_OLD_IMAGES'
      BillingMode: 'PAY_PER_REQUEST'
      ResourcePolicy:
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal: '*'
              Action:
                - 'dynamodb:PutItem'
              Resource: '*'
              Condition:
                ForAnyValue:StringEquals:
                  'aws:PrincipalOrgID': !Ref OrganizationId

  # Lambda Execution Role
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        - PolicyName: 'DynamoDBStreamPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'dynamodb:DescribeStream'
                  - 'dynamodb:GetRecords'
                  - 'dynamodb:GetShardIterator'
                  - 'dynamodb:ListStreams'
                Resource: !GetAtt NSRecordTable.StreamArn
        - PolicyName: 'Route53Policy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'route53:ChangeResourceRecordSets'
                  - 'route53:GetHostedZone'
                  - 'route53:ListResourceRecordSets'
                Resource: !Sub 'arn:aws:route53:::hostedzone/${HostedZoneId}'

  # Lambda Function
  NSRecordLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: 'route53-ns-record-manager'
      Runtime: 'python3.11'
      Handler: 'index.lambda_handler'
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          HOSTED_ZONE_ID: !Ref HostedZoneId
      Code:
        ZipFile: |
          import json
          import boto3
          import os
          
          route53 = boto3.client('route53')
          
          def lambda_handler(event, context):
              hosted_zone_id = os.environ['HOSTED_ZONE_ID']
              
              for record in event['Records']:
                  if record['eventName'] in ['INSERT', 'MODIFY']:
                      new_image = record['dynamodb']['NewImage']
                      subdomain = new_image['subdomain']['S']
                      operation = new_image['operation']['S']
                      
                      if operation == 'CREATE':
                          # Create NS record
                          ns_records = new_image['ns_records']['SS']
                          change_batch = {
                              'Changes': [{
                                  'Action': 'UPSERT',
                                  'ResourceRecordSet': {
                                      'Name': subdomain,
                                      'Type': 'NS',
                                      'TTL': 300,
                                      'ResourceRecords': [{'Value': ns} for ns in ns_records]
                                  }
                              }]
                          }
                      elif operation == 'DELETE':
                          # Delete NS record - need to get current records first
                          try:
                              response = route53.list_resource_record_sets(
                                  HostedZoneId=hosted_zone_id
                              )
                              subdomain_with_dot = subdomain if subdomain.endswith('.') else subdomain + '.'
                              for rrset in response['ResourceRecordSets']:
                                  if rrset['Name'] == subdomain_with_dot and rrset['Type'] == 'NS':
                                      change_batch = {
                                          'Changes': [{
                                              'Action': 'DELETE',
                                              'ResourceRecordSet': rrset
                                          }]
                                      }
                                      break
                              else:
                                  print(f"NS record for {subdomain} not found")
                                  continue
                          except Exception as e:
                              print(f"Error finding NS record for deletion: {str(e)}")
                              continue
                      else:
                          print(f"Unknown operation: {operation}")
                          continue
                  
                  try:
                      response = route53.change_resource_record_sets(
                          HostedZoneId=hosted_zone_id,
                          ChangeBatch=change_batch
                      )
                      print(f"Route53 change submitted: {response['ChangeInfo']['Id']}")
                  except Exception as e:
                      print(f"Error updating Route53: {str(e)}")
              
              return {'statusCode': 200}

  # DynamoDB Stream Event Source Mapping
  LambdaEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn: !GetAtt NSRecordTable.StreamArn
      FunctionName: !Ref NSRecordLambda
      StartingPosition: 'TRIM_HORIZON'

Outputs:
  DynamoDBTableName:
    Description: 'DynamoDB Table Name'
    Value: !Ref NSRecordTable
    Export:
      Name: !Sub '${AWS::StackName}-DynamoDBTableName'
  
  DynamoDBTableArn:
    Description: 'DynamoDB Table ARN'
    Value: !GetAtt NSRecordTable.Arn
    Export:
      Name: !Sub '${AWS::StackName}-DynamoDBTableArn'